Arrow functions in JavaScript provide a more concise way to write function
expressions. Here are the key points with examples:

1. **Short Syntax:**
   Arrow functions do not require the `function` keyword, the `return` keyword,
   or curly brackets if the function has a single statement.

   ```javascript
   // Regular function expression
   const add = function(a, b) {
     return a + b;
   };

   // Arrow function
   const add = (a, b) => a + b;
   ```

2. **No Own `this`:**
   Arrow functions do not have their own `this` context; they inherit `this`
   from the surrounding code. This makes them unsuitable for defining methods
   in objects where `this` refers to the object itself.

   ```javascript
   // Regular function as a method
   const obj = {
     value: 10,
     regularFunction: function() {
       return this.value;
     }
   };

   // Arrow function as a method (not recommended)
   const obj2 = {
     value: 10,
     arrowFunction: () => this.value // 'this' does not refer to obj2
   };

   console.log(obj.regularFunction()); // 10
   console.log(obj2.arrowFunction()); // undefined
   ```

3. **Not Hoisted:**
   Arrow functions, like other function expressions, are not hoisted. This
   means they must be defined before they are used.

   ```javascript
   // This will throw an error
   console.log(add(2, 3));
   const add = (a, b) => a + b;
   ```

4. **Using `const` for Safety:**
   Using `const` to define arrow functions is safer than using `var` because it
   prevents the function from being reassigned.

   ```javascript
   const add = (a, b) => a + b;
   add = (a, b) => a - b; // This will throw an error because add is a constant
   ```

5. **Single Statement Functions:**
   You can only omit the `return` keyword and the curly brackets if the
   function is a single statement. For functions with multiple statements, you
   must include curly brackets and use the `return` keyword.

   ```javascript
   // Single statement arrow function
   const square = x => x * x;

   // Multi-statement arrow function
   const addAndSquare = (a, b) => {
     const sum = a + b;
     return sum * sum;
   };
   ```

To summarize, arrow functions offer a succinct syntax for writing function
expressions, but they come with certain limitations regarding `this`, hoisting,
and their usage within objects.
