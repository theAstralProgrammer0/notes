The spread (`...`) operator in JavaScript allows you to expand an iterable
(such as an array or a string) into individual elements. This is particularly
useful in various scenarios, including function calls, array manipulation, and
object cloning.

### Expanding an Array

When you use the spread operator with an array, it expands the elements of the
array into individual values. 

#### Example:
```javascript
const numbers = [1, 2, 3];
const moreNumbers = [...numbers, 4, 5, 6];

console.log(moreNumbers); // Output: [1, 2, 3, 4, 5, 6]
```

### Function Calls

The spread operator can also be used to pass the elements of an array as
arguments to a function.

#### Example:
```javascript
function add(a, b, c) {
  return a + b + c;
}

const numbers = [1, 2, 3];

console.log(add(...numbers)); // Output: 6
```

In this example, `...numbers` expands the array `[1, 2, 3]` into individual
arguments `1, 2, 3`.

### Copying Arrays

The spread operator can create a shallow copy of an array.

#### Example:
```javascript
const originalArray = [1, 2, 3];
const copiedArray = [...originalArray];

console.log(copiedArray); // Output: [1, 2, 3]
```

### Merging Arrays

You can use the spread operator to merge arrays.

#### Example:
```javascript
const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const mergedArray = [...array1, ...array2];

console.log(mergedArray); // Output: [1, 2, 3, 4, 5, 6]
```

### Objects

The spread operator can also be used with objects to copy or merge properties.

#### Copying Objects:
```javascript
const originalObject = { a: 1, b: 2 };
const copiedObject = { ...originalObject };

console.log(copiedObject); // Output: { a: 1, b: 2 }
```

#### Merging Objects:
```javascript
const object1 = { a: 1, b: 2 };
const object2 = { c: 3, d: 4 };
const mergedObject = { ...object1, ...object2 };

console.log(mergedObject); // Output: { a: 1, b: 2, c: 3, d: 4 }
```

In summary, the spread operator is a versatile tool in JavaScript that
simplifies working with arrays and objects by expanding them into individual
elements, copying, or merging them efficiently.
