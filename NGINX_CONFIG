-- Prerequisites:
	Before starting, ensure you have a non-root user with sudo privileges set up on your Ubuntu 16.04 server.
	If not, follow the initial server setup guide provided in UBUNTU_SERVER_SETUP
	Additionally, Nginx should be installed on your server.
	Depending on your requirements, you can either install standalone Nginx or the LEMP stack (Linux, Nginx, MySQL, PHP).

-- Example Configuration:
	In this tutorial, we'll demonstrate setting up two domains (example.com and test.com) on Nginx server blocks.

	+ Step 1 — Setting Up New Document Root Directories:
		By default, Nginx serves content from /var/www/html. 
		Since we're hosting multiple sites, we need separate directories for each. 
		We need to create directories for example.com and test.com.

		++ Use `mkdir -p` to create directories for each domain:

			-> sudo mkdir -p /var/www/example.com/html

			-> sudo mkdir -p /var/www/test.com/html

		++ Change ownership of directories to your user using `chown`:
			
			-> sudo chown -R $USER:$USER /var/www/example.com/html

			-> sudo chown -R $USER:$USER /var/www/test.com/html

		++ Set Permissions using `chmod`:

			-> sudo chmod -R 755 /var/www

	+ Step 2 — Creating Sample Pages for Each Site:
		Now, we'll create basic HTML pages for each domain to serve as placeholders.

		++ Use `vim` to create `index.html` files for each domain.

			-> vim /var/www/example.com/html/index.html

		++ Write basic HTML content into the index.html for example.com indicating the site name (for easy reference).
			
			<html>
				<head>
					<title>Welcome to Example.com!</title>
				</head>
				<body>
					<h1>Success! The example.com server block is working!</h1>
				</body>
			</html>

		++ Copy the contents of /var/www/example.com/html/index.html to /var/www/test.com/html/index.html

		++ Edit the index.html file for test.com

			<html>
				<head>
					<title>Welcome to Test.com!</title>
				</head>
				<body>
					<h1>Success! The test.com server block is working!</h1>
				</body>
			</html>


		++ Save and Close the files

	+ Step 3 — Creating Server Block Files for Each Domain:
		Server blocks (similar to virtual hosts in Apache) tell Nginx how to handle requests for each domain.
		We'll create server block files for example.com and test.com.
		
		Now that we have the content we wish to serve, we need to create the server blocks that will tell Nginx how to do this.
		By default, Nginx contains one server block called `default` which we can use as a template for our own configurations.
		We will begin by designing our first domain’s server block, which we will then copy over for our second domain and make 
		the necessary modifications.
		
		++ Creating the First Server Block File: 
			As mentioned above, we will create our first server block config file by copying
			over the default file:

				-> sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com

			Now, open the new file you created in your text editor with sudo privileges:
			
				-> sudo vim /etc/nginx/sites-available/example.com
			
			Ignoring the commented lines, the file will look similar to this: (See also TYPICAL_NGINX_CONFIG_FILE)

		+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			server {
				listen 80 default_server;
				listen [::]:80 default_server;
				
				root /var/www/html;
				index index.html index.htm index.nginx-debian.html;
			
				server_name _;
			
				location / {
					try_files $uri $uri/ =404;
				}
			}
			
			First, we need to look at the `listen` directives. 
			Only ONE of our `server block`s on the server can have 
			the `default_server` option enabled. This specifies 
			which block should serve a request if the `server_name`
			requested does not match any of the available `server blocks`.
			This shouldn’t happen very frequently in real world scenarios 
			since visitors will be accessing your site through your domain name.
			
			You can choose to designate one of your sites as the “default” 
			by including the `default_server` option in the `listen` directive, 
			or you can leave the `default` `server block` enabled, which will serve 
			the content of the `/var/www/html` directory if the requested host cannot 
			be found.
			
			In this guide, we’ll leave the `default` `server block` in place to serve 
			non-matching requests, so we’ll remove the `default_server` option from 
			this and the next server block. You can choose to add the option to whichever 
			of your `server blocks` makes sense to you.

			+++++++++++++++++++++++++++++++++++++++
				server {
					listen 80;
					listen [::]:80;		=> `server block`
				
					. . .
				}		

				Note:
					You can check that the
					`default_server` option
					is only enabled in a
					single active file by
					running:

						-> grep -R default_server /etc/nginx/sites-enabled/
						
					If matches are found 
					uncommented in more
					than on file 
					(shown in the leftmost column), 
					Nginx will complain 
					about an invalid configuration.

			+++++++++++++++++++++++++++++++++++++++

			The next thing we’re going to have to adjust is the `document root`,
			specified by the `root` directive. 
			Point it to the site’s `document root` that you created:

			+++++++++++++++++++++++++++++++++++++++
				server {
					listen 80;
					listen [::]:80;
				
					root /var/www/example.com/html;
				}
			+++++++++++++++++++++++++++++++++++++++

			Next, we need to modify the `server_name` to match requests for our first domain. 
			We can additionally add any `aliases` that we want to match. 
			We will add a `www.example.com` alias to demonstrate.

			When you are finished, your file will look something like this:

			+++++++++++++++++++++++++++++++++++++++
				server {
				 	listen 80;
					listen [::]:80;
					
					root /var/www/example.com/html;
					index index.html index.htm index.nginx-debian.html;
					
					server_name example.com www.example.com;
					
					location / {
						try_files $uri $uri/ =404;
					}
				}
				
				That is all we need for a basic 
				configuration. Save and close 
				the file to exit.

			+++++++++++++++++++++++++++++++++++++++

		+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		
		++ Creating the Second Server Block File:
			Now that we have our initial server block configuration, 
			we can use that as a basis for our second file. 
			+++ Copy it over to create a new file:

				-> sudo cp /etc/nginx/sites-available/example.com /etc/nginx/sites-available/test.com

			+++ Open the new file with sudo privileges in your editor:

				-> sudo vim /etc/nginx/sites-available/test.com

			+++ Again, make sure that you do not use the `default_server` option 
			    for the `listen` directive in this file if you’ve already used it 
			    elsewhere. 
			    Adjust the `root` directive to point to your second domain’s `document root`
			    and adjust the `server_name` to match your second site’s domain name 
			    (make sure to include any aliases).

			+++ When you are finished, your file will likely look something like this:

			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				server {
					listen 80;
					listen [::]:80;
				
					root /var/www/test.com/html;
				
					index index.html index.htm index.nginx-debian.html;
				
					server_name test.com www.test.com;
				
					location / {
						try_files $uri $uri/ =404;
					}
				}	
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

			+++ When you are finished, save and close the file.

	+ Step 4 — Enabling your Server Blocks and Restart Nginx:
		Now that we have our `server block` files, we need to enable them.
		We can do this by creating symbolic links from (src) these files 
		to (dest) the `sites-enabled` directory, which Nginx reads from 
		during startup.
		
		++ We can create these links by typing:
			
			-> sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
			
			-> sudo ln -s /etc/nginx/sites-available/test.com /etc/nginx/sites-enabled/

		These files are now linked into the `enabled` directory. 
		We now have three `server blocks` enabled, 
		which are configured to respond based on their `listen` directive 
		and the `server_name` (See NGINX_ALGORITHMS for how Nginx processes these directives):

			- example.com:
				Will respond to requests for example.com and www.example.com
			- test.com: 
				Will respond to requests for test.com and www.test.com
			- default: 
				Will respond to any requests on port 80 that do not match the 
				other two blocks.

		In order to avoid a possible hash bucket memory problem that can arise from adding 
		additional server names, we will also adjust a single value within our `/etc/nginx/nginx.conf` 
		file. 
		
		++ Open the file now:
			
			-> sudo nano /etc/nginx/nginx.conf

		++ Within the file, find the `server_names_hash_bucket_size` 
		   directive. Remove the # symbol to uncomment the line:

		+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			http {
			     	. . .
				
				server_names_hash_bucket_size 64;
				
				. . .
			}
		+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		++ Save and close the file when you are finished.

		++ Next, test to make sure that there are no syntax 
		   errors in any of your Nginx files:

			-> sudo nginx -t

			If no problems were found, restart Nginx to enable your changes:

				-> sudo systemctl restart nginx

			Nginx should now be serving both of your domain names.

	
	+ Step 5 — Modifying Your Local Hosts File for Testing (Optional)
		If you have not been using domain names that you own and instead have been using placeholder values, 
		you can modify your local computer’s configuration to let you to temporarily test your 
		Nginx `server block` configuration.
		This will not allow other visitors to view your site correctly, but it will give you the ability 
		to reach each site independently and test your configuration. 
		This works by intercepting requests that would usually go to DNS to resolve domain names. 
		Instead, we can set the IP addresses we want our local computer to go to when we request the domain names.

			Note:	Make sure you are operating on your local computer during these steps 
				and not a remote server. 
				You will need to have root access, 
				be a member of the administrative group, 
				or otherwise be able to edit system files to do this.

		++ If you are on a Mac or Linux computer at home, you can edit the file needed by typing:

			-> sudo vim /etc/hosts

			You need to know your server’s public IP address and the domains you want to route to the server.
			Assuming that my server’s public IP address is 203.0.113.5, 
			the lines I would add to my file would look something like this:
			
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++
				127.0.0.1   localhost
				. . .
				
				203.0.113.5 example.com www.example.com
				203.0.113.5 test.com www.test.com
			+++++++++++++++++++++++++++++++++++++++++++++++++++++++

			This will intercept any requests for `example.com` and `test.com` 
			and send them to your server, which is what we want 
			if we don’t actually own the domains that we are using.

		++ Save and close the file when you are finished.

	+ Step 6 — Testing Your Results:
		Now that you are all set up, you should test that your server blocks are functioning correctly.
		You can do that by visiting the domains in your web browser:

			-> http://example.com
			
			You should see your `example.html` page

			-> http://test.com

			You should see your `test.html` page

		If both of these sites work, you have successfully configured two independent `server blocks` with Nginx.
		At this point, if you adjusted your hosts file on your local computer in order to test, 
		you’ll probably want to remove the lines you added.
		If you need domain name access to your server for a public-facing site, 
		you will probably want to purchase a domain name for each of your sites.

-- Conclusion:
	You should now have the ability to create server blocks for each domain you wish to host from the same server.
	There aren’t any real limits on the number of server blocks you can create, so long as your hardware can handle 
	the traffic.








