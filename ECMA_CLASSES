JavaScript classes are a way to create reusable blueprints for objects. They
encapsulate data and functions that operate on that data, enabling a more
organized and modular approach to coding. Here's a detailed explanation with
examples to illustrate:

### Creating a Class

To define a class in JavaScript, you use the `class` keyword followed by the
class name. Inside the class, you define a special method called
`constructor()`. The constructor method is automatically called when a new
instance of the class is created. It is typically used to initialize the
object's properties.

#### Syntax:
```javascript
class ClassName {
  constructor(parameter1, parameter2, ...) {
    this.property1 = parameter1;
    this.property2 = parameter2;
  }

  // Additional methods can be added here
}
```

### Example: Defining a Car Class

Let's define a class named `Car` with properties `name` and `year`.

```javascript
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}
```

In this example, `Car` is a class with a constructor method that initializes
the `name` and `year` properties for each new car object.

### Creating Objects from a Class

Once you have defined a class, you can create objects (also called instances)
of that class using the `new` keyword.

#### Example:
```javascript
const myCar1 = new Car("Ford", 2014);
const myCar2 = new Car("Audi", 2019);
```

Here, `myCar1` and `myCar2` are instances of the `Car` class. Each instance has
its own `name` and `year` properties:

- `myCar1.name` is "Ford"
- `myCar1.year` is 2014
- `myCar2.name` is "Audi"
- `myCar2.year` is 2019

### Adding Methods to a Class

Classes can also have methods that define behaviors for the objects. Methods
are functions defined inside a class.

#### Example: Adding a Method to Car Class
```javascript
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }

  displayInfo() {
    return `${this.name} is manufactured in ${this.year}.`;
  }
}

const myCar = new Car("Toyota", 2020);
console.log(myCar.displayInfo()); // Output: "Toyota is manufactured in 2020."
```

In this example, the `displayInfo` method returns a string containing the car's
name and year. When called on an instance of the `Car` class, it provides
information about that specific car.

### Inheritance

JavaScript classes support inheritance, allowing you to create a new class that
extends an existing class. The new class inherits properties and methods from
the parent class but can also have its own properties and methods.

#### Example: Inheriting from the Car Class
```javascript
class ElectricCar extends Car {
  constructor(name, year, batteryLife) {
    super(name, year); // Calls the constructor of the parent class
    this.batteryLife = batteryLife;
  }

  displayBatteryLife() {
    return `${this.name} has a battery life of ${this.batteryLife} hours.`;
  }
}

const myElectricCar = new ElectricCar("Tesla", 2021, 24);
console.log(myElectricCar.displayInfo());       // Output: "Tesla is manufactured in 2021."
console.log(myElectricCar.displayBatteryLife()); // Output: "Tesla has a battery life of 24 hours."
```

In this example, `ElectricCar` extends the `Car` class, adding a new property
`batteryLife` and a new method `displayBatteryLife`. The `super` keyword is
used to call the constructor of the parent class, ensuring that `name` and
`year` are initialized correctly.

### Summary

- **Classes**: Blueprints for creating objects, defined using the `class` keyword.
- **Constructor**: A special method for initializing new objects.
- **Instances**: Objects created from a class using the `new` keyword.
- **Methods**: Functions defined within a class to define object behaviors.
- **Inheritance**: A way to create new classes based on existing ones, allowing code reuse and extension.

Classes help organize code by grouping related properties and methods, making
it easier to manage and maintain complex programs.
