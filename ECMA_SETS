In JavaScript, a `Set` is a collection of values where each value must be
unique. It is similar to an array but does not allow duplicate elements.

Hereâ€™s a step-by-step explanation with examples:

1. **Creating a Set:**
   ```javascript
   const letters = new Set();
   ```
   This line creates a new, empty `Set` object called `letters`.

2. **Adding values to the Set:**
   ```javascript
   letters.add("a");
   letters.add("b");
   letters.add("c");
   ```
   These lines add three unique values ("a", "b", and "c") to the `Set`.

### Examples and More About Set Objects:

1. **Checking the size of the Set:**
   ```javascript
   console.log(letters.size); // Output: 3
   ```
   The `size` property returns the number of unique elements in the `Set`.

2. **Checking if a value exists in the Set:**
   ```javascript
   console.log(letters.has("a")); // Output: true
   console.log(letters.has("d")); // Output: false
   ```
   The `has` method checks if a value is present in the `Set`.

3. **Deleting a value from the Set:**
   ```javascript
   letters.delete("b");
   console.log(letters); // Output: Set { 'a', 'c' }
   ```
   The `delete` method removes a specified value from the `Set`.

4. **Iterating over the Set:**
   ```javascript
   letters.forEach((value) => {
       console.log(value);
   });
   // Output:
   // a
   // c
   ```
   The `forEach` method executes a provided function once for each value in the `Set`.

5. **Converting a Set to an Array:**
   ```javascript
   const lettersArray = Array.from(letters);
   console.log(lettersArray); // Output: [ 'a', 'c' ]
   ```
   You can convert a `Set` to an array using `Array.from`.

6. **Removing all values from the Set:**
   ```javascript
   letters.clear();
   console.log(letters.size); // Output: 0
   ```
   The `clear` method removes all elements from the `Set`.

### Summary
A `Set` in JavaScript is useful when you need to store a collection of unique
values. It provides various methods to add, remove, and check for the presence
of values, and it can be easily converted to an array if needed.
