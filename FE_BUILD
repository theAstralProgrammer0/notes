Technologies:
- React
- React Router
- React Hot Toast
- Redux
- Axios
- Tailwind css

0. You must Explain every ascpect of the code you will provide from now henceforth and
   apply best practices and show pitfalls that must be avoided. For every
   best practice used, you must explain the steps required to achieve it in details.
   You must also explain the steps and processes behind the use of each
   technology and dependency tool utilised in the creation of the application.

1. You must Build a React Front End Application using the technologies listed above.
   As for the remaining technologies and dependencies you will use to build it, you must Select 
   the most efficient and hassle-free tools for the job, explain why they have been selected 
   and of course, the steps to take to setup and use each tool prescribed by you. 

2. The UI/UX figma design for the app has been attached. The application must
   be built AS IS shown in the attached design. You may suggest other
   color combinations that matches the theme of the UI, but write the code in comments
   only as comments.

3. You must explain every part of the codes you will generate using comments.

4. You must show the file-folder structure of the application as a diagram.

5. You must write beautiful API requests to the backend using axios and ensure
   you handle all errors gracefully.

6. The Entity Relationship map for the backend has also been attached. You must
   explain and generate tests for querying the backend using axios, and all
   other aspects of the application built. The backend
   framework is a Django application, and the database used is MySQL. Don't
   provide any unnecessary python or SQL code,
   only provide the code for the front-end and for necessary python or SQL code (if any).

7. After building the landing page which is in the UI/UX design attached, you
   must build an individual destination page for all the links present in the
   design of the landing page using React Router. You must use the same color
   theme and typography to ensure a consistent UI. You must decide the best
   layout for the rest of the pages, but the landing page stays the same as
   done in the design.

======================================================================================================================
Let's begin by laying the foundation for the project. We will start by
understanding the key aspects of the project and the tools and technologies to
be used. Then, we will break down the steps required to set up the application,
ensuring we follow best practices throughout.

Here’s a high-level plan:

1. **Project Setup and Folder Structure**
2. **Component and Page Implementation**
3. **Styling with Tailwind CSS**
4. **State Management with Redux**
5. **API Integration with Axios**
6. **Routing with React Router**
7. **Error Handling and Notifications with React Hot Toast**
8. **Testing API Requests**

We will proceed step-by-step, ensuring clarity and understanding at each stage.

## 1. Project Setup and Folder Structure

### Step 1: Initialize the Project
First, we need to set up a new React project using Create React App. Then, we
will install the necessary dependencies.

**Command:**
```bash
npx create-react-app giveaid
cd giveaid
npm install react-router-dom redux react-redux axios tailwindcss react-hot-toast
```

### Step 2: Configure Tailwind CSS
Set up Tailwind CSS by creating a configuration file and updating the
`index.css` file.

**Command:**
```bash
npx tailwindcss init
```

**tailwind.config.js:**
```javascript
module.exports = {
  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  darkMode: false,
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
```

**src/index.css:**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### Step 3: Project Folder Structure
Here’s an organized folder structure to keep our code clean and maintainable.

```plaintext
giveaid/
├── public/
├── src/
│   ├── assets/
│   ├── components/
│   │   ├── Navbar.js
│   │   ├── Footer.js
│   │   ├── Hero.js
│   │   ├── DonationForm.js
│   ├── pages/
│   │   ├── Home.js
│   │   ├── Donate.js
│   │   ├── Volunteer.js
│   │   ├── SuccessStories.js
│   │   ├── AboutUs.js
│   ├── store/
│   │   ├── index.js
│   │   ├── reducers/
│   ├── utils/
│   │   ├── api.js
│   ├── App.js
│   ├── index.js
│   ├── index.css
├── package.json
```

### Explanation of Folder Structure
- **assets/**: For static files such as images, logos, etc.
- **components/**: For reusable UI components like Navbar, Footer, Hero section, etc.
- **pages/**: For different pages of the application such as Home, Donate, Volunteer, Success Stories, About Us.
- **store/**: For Redux setup, including the store configuration and reducers.
- **utils/**: For utility functions, including API calls.
- **App.js**: The main component that includes the router setup.
- **index.js**: Entry point of the application.
- **index.css**: Global styles using Tailwind CSS.

Next, let's move on to implementing the core components and setting up the landing page as per the provided Figma design.

## 2. Component and Page Implementation

### Step 4: Implement Navbar Component
The Navbar will contain links to different sections of the application.

**src/components/Navbar.js:**
```javascript
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav className="bg-white shadow-md">
      <div className="container mx-auto px-4 py-2 flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold text-gray-800">GiveAid</Link>
        <div>
          <Link to="/" className="mx-2 text-gray-600 hover:text-gray-800">Home</Link>
          <Link to="/donate" className="mx-2 text-gray-600 hover:text-gray-800">Donate</Link>
          <Link to="/volunteer" className="mx-2 text-gray-600 hover:text-gray-800">Volunteer</Link>
          <Link to="/success-stories" className="mx-2 text-gray-600 hover:text-gray-800">Success Stories</Link>
          <Link to="/about-us" className="mx-2 text-gray-600 hover:text-gray-800">About Us</Link>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
```

### Step 5: Implement Hero Component
The Hero component will display the main promotional message on the landing page.

**src/components/Hero.js:**
```javascript
import React from 'react';

const Hero = () => {
  return (
    <section className="bg-cover bg-center h-screen" style={{ backgroundImage: "url('/path/to/hero-image.jpg')" }}>
      <div className="container mx-auto px-4 py-16 text-center text-white">
        <h1 className="text-4xl font-bold mb-4">Transforming Lives Through Hope and Service</h1>
        <p className="text-lg mb-8">Welcome to GiveAid, where we strive to build a more compassionate, equitable, and prosperous future for all.</p>
        <button className="bg-yellow-500 text-white px-6 py-2 rounded-full">Donate Now</button>
      </div>
    </section>
  );
};

export default Hero;
```

Next, we will implement the Home page that includes the Navbar and Hero components.

### Step 6: Implement Home Page
The Home page will incorporate the Navbar and Hero components.

**src/pages/Home.js:**
```javascript
import React from 'react';
import Navbar from '../components/Navbar';
import Hero from '../components/Hero';

const Home = () => {
  return (
    <>
      <Navbar />
      <Hero />
    </>
  );
};

export default Home;
```

### Step 7: Update App.js for Routing
We will set up routing in `App.js` using React Router.

**src/App.js:**
```javascript
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './pages/Home';
import Donate from './pages/Donate';
import Volunteer from './pages/Volunteer';
import SuccessStories from './pages/SuccessStories';
import AboutUs from './pages/AboutUs';

const App = () => {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={Home} />
        <Route path="/donate" component={Donate} />
        <Route path="/volunteer" component={Volunteer} />
        <Route path="/success-stories" component={SuccessStories} />
        <Route path="/about-us" component={AboutUs} />
      </Switch>
    </Router>
  );
};

export default App;
```

### Explanation of Code
- **Navbar.js**: This component includes navigation links to different pages.
		 The `Link` component from `react-router-dom` is used for client-side
		 navigation.
- **Hero.js**: This component displays a promotional message with a background
	       image, a heading, a paragraph, and a call-to-action button.
- **Home.js**: This page component combines the Navbar and Hero components to
	       render the landing page.
- **App.js**: This file sets up the router with routes corresponding to
	      different pages of the application.

Next, we will implement other necessary components and pages, style them using
Tailwind CSS, and integrate state management using Redux. Let's confirm if this
setup and explanation meet your expectations before proceeding.
