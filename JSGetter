get
The get syntax binds an object property to a function that will be called when that property is looked up. It can also be used in classes.

Try it

Syntax
JS
Copy to Clipboard
{ get prop() { /* … */ } }
{ get [expression]() { /* … */ } }
There are some additional syntax restrictions:

A getter must have exactly zero parameters.
Parameters
prop
The name of the property to bind to the given function. In the same way as other properties in object initializers, it can be a string literal, a number literal, or an identifier.

expression
You can also use expressions for a computed property name to bind to the given function.

Description
Sometimes it is desirable to allow access to a property that returns a dynamically computed value, or you may want to reflect the status of an internal variable without requiring the use of explicit method calls. In JavaScript, this can be accomplished with the use of a getter.

An object property is either a data property or an accessor property, but it cannot simultaneously be both. Read Object.defineProperty() for more information. The getter syntax allows you to specify the getter function in an object initializer.

JS
Copy to Clipboard
const obj = {
  get prop() {
    // getter, the code executed when reading obj.prop
    return someValue;
  },
};
Properties defined using this syntax are own properties of the created object, and they are configurable and enumerable.

Examples
Defining a getter on new objects in object initializers
This will create a pseudo-property latest for object obj, which will return the last array item in log.

JS
Copy to Clipboard
const obj = {
  log: ["example", "test"],
  get latest() {
    if (this.log.length === 0) return undefined;
    return this.log[this.log.length - 1];
  },
};
console.log(obj.latest); // "test"
Note that attempting to assign a value to latest will not change it.

Using getters in classes
You can use the exact same syntax to define public instance getters that are available on class instances. In classes, you don't need the comma separator between methods.

JS
Copy to Clipboard
class ClassWithGetSet {
  #msg = "hello world";
  get msg() {
    return this.#msg;
  }
  set msg(x) {
    this.#msg = `hello ${x}`;
  }
}

const instance = new ClassWithGetSet();
console.log(instance.msg); // "hello world"

instance.msg = "cake";
console.log(instance.msg); // "hello cake"
Getter properties are defined on the prototype property of the class and are thus shared by all instances of the class. Unlike getter properties in object literals, getter properties in classes are not enumerable.

Static getters and private getters use similar syntaxes, which are described in the static and private properties pages.

Deleting a getter using the delete operator
If you want to remove the getter, you can just delete it:

JS
Copy to Clipboard
delete obj.latest;
Defining a getter on existing objects using defineProperty
To append a getter to an existing object later at any time, use Object.defineProperty().

JS
Copy to Clipboard
const o = { a: 0 };

Object.defineProperty(o, "b", {
  get() {
    return this.a + 1;
  },
});

console.log(o.b); // Runs the getter, which yields a + 1 (which is 1)
Using a computed property name
JS
Copy to Clipboard
const expr = "foo";

const obj = {
  get [expr]() {
    return "bar";
  },
};

console.log(obj.foo); // "bar"
Defining static getters
JS
Copy to Clipboard
class MyConstants {
  static get foo() {
    return "foo";
  }
}

console.log(MyConstants.foo); // 'foo'
MyConstants.foo = "bar";
console.log(MyConstants.foo); // 'foo', a static getter's value cannot be changed
Smart / self-overwriting / lazy getters
Getters give you a way to define a property of an object, but they do not calculate the property's value until it is accessed. A getter defers the cost of calculating the value until the value is needed. If it is never needed, you never pay the cost.

An additional optimization technique to lazify or delay the calculation of a property value and cache it for later access are smart (or memoized) getters. The value is calculated the first time the getter is called, and is then cached so subsequent accesses return the cached value without recalculating it. This is useful in the following situations:

If the calculation of a property value is expensive (takes much RAM or CPU time, spawns worker threads, retrieves remote file, etc.).
If the value isn't needed just now. It will be used later, or in some case it's not used at all.
If it's used, it will be accessed several times, and there is no need to re-calculate that value will never be changed or shouldn't be re-calculated.
Note: This means that you shouldn't write a lazy getter for a property whose value you expect to change, because if the getter is lazy then it will not recalculate the value.

Note that getters are not "lazy" or "memoized" by nature; you must implement this technique if you desire this behavior.

In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally, the value gets returned.

JS
Copy to Clipboard
const obj = {
  get notifier() {
    delete this.notifier;
    this.notifier = document.getElementById("bookmarked-notification-anchor");
    return this.notifier;
  },
};
get vs. defineProperty
While using the get keyword and Object.defineProperty() have similar results, there is a subtle difference between the two when used on classes.

When using get the property will be defined on the instance's prototype, while using Object.defineProperty() the property will be defined on the instance it is applied to.

JS
Copy to Clipboard
class Example {
  get hello() {
    return "world";
  }
}

const obj = new Example();
console.log(obj.hello);
// "world"

console.log(Object.getOwnPropertyDescriptor(obj, "hello"));
// undefined

console.log(
  Object.getOwnPropertyDescriptor(Object.getPrototypeOf(obj), "hello"),
);
// { configurable: true, enumerable: false, get: function get hello() { return 'world'; }, set: undefined }
Specifications
Specification
ECMAScript Language Specification
# sec-method-definitions
Browser compatibility
Report problems with this compatibility data on GitHub
desktop	mobile	server
Chrome
Edge
Firefox
Opera
Safari
Chrome Android
Firefox for Android
Opera Android
Safari on iOS
Samsung Internet
WebView Android
Deno
Node.js
get

1
Toggle history	
12
Toggle history	
1.5
Toggle history	
9.5
Toggle history	
3
Toggle history	
18
Toggle history	
4
Toggle history	
14
Toggle history	
1
Toggle history	
1.0
Toggle history	
4.4
Toggle history	
1.0
Toggle history	
0.10.0
Toggle history
Computed property names

46
Toggle history	
12
Toggle history	
34
Toggle history	
47
Toggle history	
9.1
Toggle history	
46
Toggle history	
34
Toggle history	
33
Toggle history	
9.3
Toggle history	
5.0
Toggle history	
46
Toggle history	
1.0
Toggle history	
4.0.0
Toggle history
Legend
Tip: you can click/tap on a cell for more information.
